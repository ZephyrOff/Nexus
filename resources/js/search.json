[[{"l":"Index","p":["Nexus est un outil qui se veut être un gestionnaire de projet Python complet. L'objectif est de centraliser l'ensemble des besoins d'un développeur Python au même endroit pour faciliter son utilisation et limiter la nécessité d'installer de multiples outils.","A l'instar de Poetry, Nexus se positionne comme un gestionnaire de dépendances et de packaging. Le tout accompagné d'un système d'environnement virtuel pour isoler les différents environnements de travail.","L'outil propose également des outils d'analyse et de mise en conformité de votre code grâce à l'intégration de pylint, bandit et black.","L'implémentation de cx_freeze permet de compiler son code en version portable.","Un système de repository interne et de backup permet de versionner proprement son code et de réaliser les sauvegardes pour réaliser des archives."]}],[{"l":"Analyse","p":["La commande analyse est une intégration de l'outil pylint qui permet d'analyser le code dans le but de déterminer la qualité du code et de proposer des axes d'améliorations pour se rapprocher des recommandations PEP. L'analyse va alors nous ressortir la liste des éléments à modifier dans notre code, ainsi qu'une note sur 10 qui sera base en fonction du nombre de problème à corriger."]},{"l":"Options","p":["-e ou --exclude permet d'exclure de l'analyse certains composants. Par exemple, E0602 pour les undefined variable","-n ou --onlynote permet d'afficher uniquement la note","-r ou --onlyreport permet d'afficher uniquement les choses à modifier (sans la note)","--recursive permet d'analyser les fichiers .py qui se trouve dans les répertoires. Cela rendra l'analyse plus longue mais plus complète dans le cas de code complexe."]}],[{"l":"Clearcode","p":["La commande clearcode est une intégration de l'outil Black qui permet d'analyser et de corriger le formatage du code.","Par défaut, la commande va analyser l'ensemble des fichiers .py se trouvant dans le répertoire courant et retourner les modifications dans le prompt. Il est possible de préciser un ou plusieurs fichiers en particulier pour l'analyse."]},{"l":"Options","p":["--apply permet d'appliquer les modifications directement sur les fichiers analysés Cela permettra de corriger le formatage du code sans étape intermédiaire.","--output permet de spécifier un fichier de sortie. Les fichiers modifiés seront alors placés dans un autre fichier pour permettre une analyse plus simple des modifications.","-r ou --recursive permet d'analyser les fichiers .py qui se trouve dans les répertoires. Cela rendra l'analyse plus longue mais plus complète dans le cas de code complexe.","--fast permet de faire une analyse rapide du code, qui sera moins précise qu'une analyse complète, mais qui prendra beaucoup moins de temps sur des volumes de code conséquents."]}],[{"l":"Securiscan","p":["La commande securiscan est une intégration de l'outil Bandit qui permet de détecter les problèmes de sécurité courants. Cette option ne remplace pas un réel outil d'analyse de la sécurité de votre code mais propose une premier niveau d'analyse durant votre développement.","Suite à l'analyse, la commande retournera différents niveaux de détails sur les erreurs à corriger tels que le nom du fichier, le niveau de criticité, l'emplacement de l'erreur ou encore des liens vers les informations détaillées sur la faille ciblée."]},{"l":"Options","p":["-e ou --errors affichera les erreurs d'analyse","-g ou --globalmetric affichera les totales des métriques suite à l'analyse. Par exemple, le nombre de faille HIGH, MEDIUM ou LOW","-f ou --filemetric affichera les métriques par fichier.","-m ou --allmetric affichera l'ensemble des métriques.","-d ou --details affichera le détail des résultats comme les erreurs à corriger tels que le nom du fichier, le niveau de criticité, l'emplacement de l'erreur ou encore des liens vers les informations détaillées sur la faille ciblée.","-a ou --all affichera l'ensemble des informations.","-r ou --recursive permet d'analyser les fichiers .py qui se trouve dans les répertoires. Cela rendra l'analyse plus longue mais plus complète dans le cas de code complexe.","-E ou --exclude permet d'exclure certains fichiers de l'analyse","-s ou --severity permet de filtrer par niveau de severity 1: LOW, 2: MEDIUM, 3: HIGH","-c ou --confidence permet de filtrer par niveau de confidence 1: LOW, 2: MEDIUM, 3: HIGH"]}],[{"l":"Ajouter un environnement existant","p":["Il est possible d'assigner un environnement existant à un projet","Il faudra à minima préciser le chemin vers l'environnement"]},{"l":"Options","p":["--name définie le nom de l'environnement","-d ou --default pour définir ce nouvel environnement comme l'environnement par défaut"]}],[{"l":"Cloner un environnement","p":["Il est possible de cloner un environnement virtuel existant avec l'ensemble des paramètres et dépendances de celui-ci","Il faudra préciser le nom de l'environnement existant et le nom du nouvel environnement."]}],[{"i":"création-dun-environnement","l":"Création d'un environnement","p":["Pour la création d'un environnement virtuel, nous utilisons l'argument env --create","Il faudra à minima préciser le nom de l'environnement","Dans la configuration Nexus, il existe des paramètres qui sont utilisés pour définir le comportement lors de la création des environnements","virtualenvs.create: Détermine si un environnement virtuel est créé lors de la création d'un projet Nexus virtualenvs.clear: Détermine si le dossier de l'environnement doit être nettoyer si non vide lors de la création virtualenvs.upgradepip: Détermine si pip doit être mis à jour lors de la création virtualenvs.in-project: Détermine si l'environnement doit être créé dans le répertoire du projet (sinon est créé dans le répertoire cache-dir) virtualenvs.symlinks: Détermine si l'environnement fait des liens symboliques ou copie les exécutables Python virtualenvs.system-site-packages: Détermine si l'environnement peut utiliser le site-packages du système virtualenvs.foldername: Détermine le nom du répertoire des environnements virtuels"]},{"l":"Options","p":["-d ou --default pour définir ce nouvel environnement comme l'environnement par défaut","--withoutdeps pour définir si les dépendances du projet doit être installés au moment de la création de l'environnement","--clear pour définir si le dossier de l'environnement doit être nettoyer si non vide lors de la création","-C ou --cache pour forcer la création de l'environnement dans le dossier de cache","-p ou --prompt pour définir le prompt dans l'environnement"]}],[{"l":"Environnement par défaut","p":["Dans la majorité des commandes, Nexus tentera de retrouver dans le fichier de configuration du projet si un environnement par défaut est configuré, si c'est le cas il lancera ces actions dessus, dans le cas contraire, il lancera ces actions sur le python racine."]},{"l":"Définir en environnement par défaut","p":["L'argument --default permet de définir l'environnent par défaut."]},{"i":"désactiver-lenvironnement-par-défaut","l":"Désactiver l'environnement par défaut","p":["L'argument --disable supprime la mention par défaut sur un environnement."]}],[{"l":"Environnement virtuel","p":["Nexus propose un système d'environnement virtuel. Un environnement virtuel Python est un espace isolé et autonome dans lequel vous pouvez installer des paquets, dépendances et versions spécifiques de Python pour un projet donné. Ce mécanisme vous permet de maintenir différentes configurations et dépendances de packages pour différents projets, sans interférer avec d'autres environnements Python.","Pour la création de ces environnements, l'outil utilise l'utilitaire virtualenv","L'exécution de la commande sans argument tentera d'ouvrir l'environnement virtuel par défaut","Pour travailler sur ces projets, Nexus va toujours regarder dans le fichier de configuration du projet si un environnement par défaut est configuré, si c'est le cas il lancera ces actions dessus, dans le cas contraire, il lancera ces actions sur le python racine."]}],[{"i":"migration-denvironnement","l":"Migration d'environnement","p":["Il est possible de migrer un environnement virtuel du cache vers le projet ou inversement","Il faudra à minima préciser le nom de l'environnement"]},{"l":"Options","p":["-D ou --dest définie le chemin de destination de l'environnement"]}],[{"l":"Sandbox","p":["Pour réaliser des tests sur l'instant, Nexus propose la création de sandbox qui sont créée en direct et qui sont supprimées lors de la sortie de l'environnement.","Cet environnement fonctionne comme un environnement classique. Il est possible d'installer/supprimer des packages, exécuter des commandes ou encore ouvrir un prompt."]}],[{"l":"Supprimer un environnement","p":["Il est possible de supprimer un environnement virtuel d'un projet. Dans ce cas, le projet sera supprimé du fichier de configuration du projet et les fichiers de l'environnement seront effacés.","Il faudra à minima préciser le nom de l'environnement"]}],[{"l":"Travail dans un environnement","p":["Il existe plusieurs solutions pour travailler dans un environnement virtuel, ouvrir un environnement, ouvrir le prompt Python ou encore exécuter une commande dans l'environnement.","Entrer dans un environnement virtuel Python signifie configurer votre terminal ou votre invite de commande pour utiliser l'installation Python et les dépendances spécifiques à cet environnement virtuel. Cela isole l'environnement virtuel, garantissant que les commandes Python et les exécutions de scripts utilisent les packages installés dans cet environnement spécifique."]},{"l":"Entrer dans un environnement","p":["Deux méthodes, utiliser la commande nxs env sans aucun paramètre ouvrira l'environnement par défaut","Pour entrer dans un environnement spécifique, il faudra utiliser l'argument --open"]},{"l":"Ouvrir le prompt Python","p":["La commande shell va permettre d'ouvrir directement le prompt Python de l'environnement virtuel sans passer par la phase d'entrée dans l'environnement.","Sans paramètre, la commande va ouvrir l'environnement par défaut Pour ouvrir un shell d'un environnement spécifique, il faudra utiliser l'argument -e ou --env"]},{"l":"Exécuter une commande ou script","p":["Nexus propose d'exécuter une commande directement dans un environnement sans l'ouvrir.","Il est également possible d'exécuter un fichier .py"]},{"l":"Options","p":["Par défaut, la commande utilisera l'environnement par défaut. Pour utiliser un environnement spécifique, il faudra utiliser l'argument -e ou --env","Pour faciliter les tests, il est possible de définir des paramètres qui seront utilisés lors de l'exécution par la commande --set","Ces paramètres seront stockés dans le fichier du projet et seront utilisés au lancement de la commande run","Il est également possible de dissocier les exécutions de test (avec --test) et de prod (avec --prod) pour permettre de réaliser différents tests rapidement","Pour contrôler les temps d'exécutions, l'option -T ou --time permet d'afficher le temps de la commande ou du script"]}]]